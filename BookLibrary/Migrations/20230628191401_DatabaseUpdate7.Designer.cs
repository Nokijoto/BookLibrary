// <auto-generated />
using System;
using BookLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230628191401_DatabaseUpdate7")]
    partial class DatabaseUpdate7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookLibrary.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Authors", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<Guid>("AuthorUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("author_uuid");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.HasKey("AuthorId");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BookAuthors", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("author_id");

                    b.Property<int>("BookId")
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex(new[] { "AuthorId" }, "author_id");

                    b.HasIndex(new[] { "BookId" }, "book_id");

                    b.ToTable("book_authors");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BookGenres", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int(11)")
                        .HasColumnName("genre_id");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex(new[] { "BookId" }, "book_id")
                        .HasDatabaseName("book_id1");

                    b.HasIndex(new[] { "GenreId" }, "genre_id");

                    b.ToTable("book_genres");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BookShelfs", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int(11)")
                        .HasColumnName("shelf_id");

                    b.HasKey("BookId", "ShelfId");

                    b.HasIndex(new[] { "BookId" }, "book_id")
                        .HasDatabaseName("book_id2");

                    b.HasIndex(new[] { "ShelfId" }, "shelf_id");

                    b.ToTable("book_shelfs");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<Guid>("BookUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("book_uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("isbn");

                    b.Property<string>("PublishedDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("published_date");

                    b.Property<int>("Rating")
                        .HasColumnType("int(11)")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int(11)")
                        .HasColumnName("total_pages");

                    b.HasKey("BookId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BooksSeries", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int(11)")
                        .HasColumnName("series_id");

                    b.HasKey("BookId", "SeriesId");

                    b.HasIndex(new[] { "BookId" }, "book_id")
                        .HasDatabaseName("book_id3");

                    b.HasIndex(new[] { "SeriesId" }, "series_id");

                    b.ToTable("books_series");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Genres", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("genre_id");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("genre");

                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.HasKey("GenreId");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("series_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("PublishedDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("published_date");

                    b.Property<string>("SerieName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serie_name");

                    b.Property<Guid>("SeriesUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("series_uuid");

                    b.HasKey("SeriesId");

                    b.ToTable("series");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.SeriesAuthors", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int(11)")
                        .HasColumnName("series_id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("author_id");

                    b.HasKey("SeriesId", "AuthorId");

                    b.HasIndex(new[] { "AuthorId" }, "author_id")
                        .HasDatabaseName("author_id1");

                    b.HasIndex(new[] { "SeriesId" }, "series_id")
                        .HasDatabaseName("series_id1");

                    b.ToTable("series_authors");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Shelfs", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("shelf_id");

                    b.Property<string>("CreatedByUn")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("created_by_un");

                    b.Property<string>("ShelfName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shelf_name");

                    b.Property<Guid>("ShelfUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("shelf_uuid");

                    b.HasKey("ShelfId");

                    b.ToTable("shelfs");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.UserShelfs", b =>
                {
                    b.Property<string>("ProfileUn")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_un");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int(11)")
                        .HasColumnName("shelf_id");

                    b.Property<string>("ProfileId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProfileUn", "ShelfId");

                    b.HasIndex(new[] { "ProfileId" }, "profile_un");

                    b.HasIndex(new[] { "ShelfId" }, "shelf_id")
                        .HasDatabaseName("shelf_id1");

                    b.ToTable("userShelfs");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Use")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BookAuthors", b =>
                {
                    b.HasOne("BookLibrary.Models.PageModels.Authors", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_BookAuthors_Authors");

                    b.HasOne("BookLibrary.Models.PageModels.Books", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookAuthors_Books");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BookGenres", b =>
                {
                    b.HasOne("BookLibrary.Models.PageModels.Books", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookGenres_Books");

                    b.HasOne("BookLibrary.Models.PageModels.Genres", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_BookGenres_Genres");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BookShelfs", b =>
                {
                    b.HasOne("BookLibrary.Models.PageModels.Books", "Book")
                        .WithMany("BookShelves")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookShelfs_Books");

                    b.HasOne("BookLibrary.Models.PageModels.Shelfs", "Shelf")
                        .WithMany("BookShelves")
                        .HasForeignKey("ShelfId")
                        .IsRequired()
                        .HasConstraintName("FK_BookShelfs_Shelfs");

                    b.Navigation("Book");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.BooksSeries", b =>
                {
                    b.HasOne("BookLibrary.Models.PageModels.Books", "Book")
                        .WithMany("BooksSeries")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BooksSeries_Books");

                    b.HasOne("BookLibrary.Models.PageModels.Series", "Series")
                        .WithMany("BookSeries")
                        .HasForeignKey("SeriesId")
                        .IsRequired()
                        .HasConstraintName("FK_BooksSeries_Series");

                    b.Navigation("Book");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.SeriesAuthors", b =>
                {
                    b.HasOne("BookLibrary.Models.PageModels.Authors", "Author")
                        .WithMany("SeriesAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_SeriesAuthors_Authors");

                    b.HasOne("BookLibrary.Models.PageModels.Series", "Series")
                        .WithMany("SeriesAuthors")
                        .HasForeignKey("SeriesId")
                        .IsRequired()
                        .HasConstraintName("FK_SeriesAuthors_Series");

                    b.Navigation("Author");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.UserShelfs", b =>
                {
                    b.HasOne("BookLibrary.Models.ApplicationUser", "Profile")
                        .WithMany("UserShelfs")
                        .HasForeignKey("ProfileUn")
                        .IsRequired()
                        .HasConstraintName("FK_UserShelfs_Profile");

                    b.HasOne("BookLibrary.Models.PageModels.Shelfs", "Shelf")
                        .WithMany("UserShelfs")
                        .HasForeignKey("ShelfId")
                        .IsRequired()
                        .HasConstraintName("FK_UserShelfs_Shelfs");

                    b.Navigation("Profile");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookLibrary.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookLibrary.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookLibrary.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibrary.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserShelfs");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Authors", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("SeriesAuthors");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Books", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("BookShelves");

                    b.Navigation("BooksSeries");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Genres", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Series", b =>
                {
                    b.Navigation("BookSeries");

                    b.Navigation("SeriesAuthors");
                });

            modelBuilder.Entity("BookLibrary.Models.PageModels.Shelfs", b =>
                {
                    b.Navigation("BookShelves");

                    b.Navigation("UserShelfs");
                });
#pragma warning restore 612, 618
        }
    }
}
